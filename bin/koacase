#!/usr/bin/env node

var program = require('commander');
var mkdirp = require('mkdirp');
var os = require('os');
var fs = require('fs');
var path = require('path');
var readline = require('readline');
var sortedObject = require('sorted-object');

var _exit = process.exit;
var eol = os.EOL;
var pkg = require('../package.json');

var version = pkg.version;

// Re-assign process.exit because of commander
// TODO: Switch to a different command framework
process.exit = exit

// CLI

before(program, 'outputHelp', function () {
  this.allowUnknownOption();
});

program
  .version(version)
  .usage('[options] [dir]')
  .option('    --git', 'add .gitignore')
  .option('-f, --force', 'force on non-empty directory')
  .parse(process.argv);

if (!exit.exited) {
  main();
}

/**
 * Install a before function; AOP.
 */

function before(obj, method, fn) {
  var old = obj[method];

  obj[method] = function () {
    fn.call(this);
    old.apply(this, arguments);
  };
}

/**
 * Prompt for confirmation on STDOUT/STDIN
 */

function confirm(msg, callback) {
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.question(msg, function (input) {
    rl.close();
    callback(/^y|yes|ok|true$/i.test(input));
  });
}

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createApplication(app_name, path) {
  var wait = 5;

  console.log();
  function complete() {
    if (--wait) return;
    var prompt = launchedFromCmd() ? '>' : '$';

    console.log();
    console.log('   install dependencies:');
    console.log('     %s cd %s && npm install', prompt, path);
    console.log();
    console.log('   run the app:');

    if (launchedFromCmd()) {
      console.log('     %s SET DEBUG=%s:* & npm start', prompt, app_name);
    } else {
      console.log('     %s DEBUG=%s:* npm start', prompt, app_name);
    }

    console.log();
  }

  // JavaScript
  var server = loadTemplate('server.js');
  var index = loadTemplate('app/index.js');
  var config = loadTemplate('app/config.js');
  var errorCode = loadTemplate('app/errorCode.js');
  var router = loadTemplate('app/controller/router.js');
  var cRouter = loadTemplate('app/common/cRouter.js');
  var findFile = loadTemplate('app/common/findFile.js');
  var jutil = loadTemplate('app/common/jutil.js');
  var logger = loadTemplate('app/common/logger.js');
  var request = loadTemplate('app/common/request.js');
  var routerScan = loadTemplate('app/common/routerScan.js');
  var signature = loadTemplate('app/common/signature.js');
  var signurl = loadTemplate('app/common/signurl.js');

  //json
  var config_json = loadTemplate('app/config.json');
  config_json = config_json.replace('{{serverPort}}',3000);

  //view
  var view_test = loadTemplate('app/views/test.pug');


  mkdir(path, function(){
    mkdir(path + '/common', function(){
        write(path + '/common/cRouter.js', cRouter);
        write(path + '/common/findFile.js', findFile);
        write(path + '/common/jutil.js', jutil);
        write(path + '/common/logger.js', logger);
        write(path + '/common/request.js', request);
        write(path + '/common/routerScan.js', routerScan);
        write(path + '/common/signature.js', signature);
        write(path + '/common/signurl.js', signurl);
        complete();
    });

    mkdir(path+'/controller',function(){
      write(path+"/controller/router.js",router);
    });

    mkdir(path + '/views', function(){
      write(path + '/views/test.pug', view_test);
      complete();
    });

    // Template support
    // app = app.replace('{views}', program.template);

    // package.json
    var pkg = {
        name: app_name
      , version: '0.0.0'
      , private: true
      , scripts: { start: 'node ./server.js' }
      , dependencies: {
        "co-request": "^0.2.1",
        "koa": "^1.2.2",
        "koa-bodyparser": "^2.2.0",
        "koa-favi": "^0.1.0",
        "koa-generic-session": "^1.9.0",
        "koa-logger2": "0.0.1",
        "koa-mount": "^1.3.0",
        "koa-pug": "^3.0.0-2",
        "koa-redis": "https://github.com/jmeo/koa-redis.git",
        "koa-router": "^5.4.0",
        "koa-static": "^2.0.0",
        "log": "^1.4.0",
        "log4js": "^0.6.38",
        "moment": "^2.18.0",
        "properties": "^1.2.1",
        "request": "^2.58.0",
        "underscore": "^1.8.3"
      }
    }

    // sort dependencies like npm(1)
    pkg.dependencies = sortedObject(pkg.dependencies);
    
    // write files
    write(path + '/package.json', JSON.stringify(pkg, null, 2));
    write(path + '/app.js', app);

    // if (program.git) {
    //   write(path + '/.gitignore', fs.readFileSync(__dirname + '/../templates/js/gitignore', 'utf-8'));
    // }

    complete();
  });
}

function copy_template(from, to) {
  from = path.join(__dirname, '..', 'templates', from);
  write(to, fs.readFileSync(from, 'utf-8'));
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * Graceful exit for async STDIO
 */

function exit(code) {
  // flush output for Node.js Windows pipe bug
  // https://github.com/joyent/node/issues/6247 is just one bug example
  // https://github.com/visionmedia/mocha/issues/333 has a good discussion
  function done() {
    if (!(draining--)) _exit(code);
  }

  var draining = 0;
  var streams = [process.stdout, process.stderr];

  exit.exited = true;

  streams.forEach(function(stream){
    // submit empty write request and wait for completion
    draining += 1;
    stream.write('', done);
  });

  done();
}

/**
 * Determine if launched from cmd.exe
 */

function launchedFromCmd() {
  return process.platform === 'win32'
    && process.env._ === undefined;
}

/**
 * Load template file.
 */

function loadTemplate(name) {
  return fs.readFileSync(path.join(__dirname, '..', 'templates', name), 'utf-8');
}

/**
 * Main program.
 */

function main() {
  // Path
  var destinationPath = program.args.shift() || '.';

  // App name
  var appName = path.basename(path.resolve(destinationPath));

  // Template engine
  program.template = 'jade';
  if (program.ejs) program.template = 'ejs';
  if (program.hogan) program.template = 'hjs';
  if (program.hbs) program.template = 'hbs';

  // Generate application
  emptyDirectory(destinationPath, function (empty) {
    if (empty || program.force) {
      createApplication(appName, destinationPath);
    } else {
      confirm('destination is not empty, continue? [y/N] ', function (ok) {
        if (ok) {
          process.stdin.destroy();
          createApplication(appName, destinationPath);
        } else {
          console.error('aborting');
          exit(1);
        }
      });
    }
  });
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str, mode) {
  fs.writeFileSync(path, str, { mode: mode || 0666 });
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}
